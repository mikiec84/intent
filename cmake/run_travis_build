#! /usr/bin/env python
import os, sys, subprocess, shutil
import sanitizers

def patch_gcc_46():
    # see http://clang.llvm.org/libstdc++4.6-clang11.patch
    if os.geteuid() != 0:
        print("May not be able to patch gcc 4.6 for c++11; not running as root.")

    fname = '/usr/include/c++/4.6/type_traits'
    bad_line = "{ typedef decltype(true ? declval<_Tp>() : declval<_Up>()) type; };"
    good_line = "{ typedef typename decay<decltype(true ? declval<_Tp>() : declval<_Up>())>::type type; };"

    print('Patching %s for c++11 compatibility...' % fname)
    with open(fname, 'r') as f:
        txt = f.read()
    i = txt.find(bad_line)
    if i > -1:
        txt = txt[0:i] + good_line + txt[i + len(bad_line):]
        with open('/tmp/type_traits.new', 'w') as f:
            f.write(txt)
        # We use sudo here because we might be running with sudo privs without
        # being root.
        cmd = 'sudo mv %s %s.bak ' \
            + '&& sudo chown root:root /tmp/type_traits.new ' \
            + '&& sudo chmod g-w,o-w /tmp/type_traits.new ' \
            + '&& sudo mv /tmp/type_traits.new %s'
        cmd = cmd % (fname, fname, fname)
        os.system(cmd)
        print('Patch applied successfully.')
    else:
        print('Bad line not found; has it already been patched?')

def x(cmd):
    print(cmd)
    subprocess.check_call(cmd.split(' '))

def install_required_tools():
    travis_os = os.getenv('TRAVIS_OS_NAME')
    if travis_os == 'linux':
        x('sudo apt-get remove -qq libboost-*-dev -y')
        x('sudo apt-get autoremove -qq -y')
        x('sudo add-apt-repository ppa:boost-latest/ppa -y')
        x('sudo apt-get update -qq')
        x('sudo apt-get install -qq -y libboost1.55-all-dev')
        x('sudo apt-get install -qq -y libpcre3-dev')
        #x('sudo apt-get install -qq -y doxygen graphviz')
        if os.path.isdir('/usr/include/c++/4.6'):
            if not os.path.isdir('/usr/include/c++/4.8'):
                patch_gcc_46()
    elif travis_os == 'osx':
        x('brew install cmake')
        x('brew install boost')
        x('brew install pcre')
        x('brew install doxygen')
        x('brew install graphviz')

if __name__ == '__main__':
    install_required_tools()
    non_build_variants = 'integer undefined unsigned-integer-overflow address'.split(' ')
    build_variants = ['Debug', 'Release', 'analyze'] + ['sanitize-' + s for s in sanitizers.detect() 
        if s not in non_build_variants]
    os.chdir(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
    old_cwd = os.getcwd()
    for variant in build_variants: 
        print('\n---------------------------------- %s build ------' % variant)
        folder = 'build/travis-%s' % variant
        if os.path.isdir(folder):
            shutil.rmtree(folder)
        os.makedirs(folder)
        os.chdir(folder)
        try:
            # Most of the time, build in parallel. However, on the first build in
            # the group, run the build in serial, so error messages are easier to
            # understand.
            make_flags = ' -j12'
            if variant == build_variants[0]:
                make_flags = ''
            x('cmake -DCMAKE_BUILD_TYPE=%s ../..' % variant)
            x('make%s' % make_flags)
            x('make test')
            if variant == 'Release':
                 x('make package')
                 # Installing doxygen imposes a lot of overhead, so for now,
                 # only do it on osx. (Since I am doing most of my dev work on
                 # OSX, I value faster feedback from the linux builds...)
                 if os.uname()[0] == 'Darwin':
                     x('make doc')
        finally:
            os.chdir(old_cwd)
