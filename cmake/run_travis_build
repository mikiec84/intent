#! /usr/bin/env python
import os, sys, subprocess, shutil
import sanitizers

def x(cmd):
    print(cmd)
    subprocess.check_call(cmd.split(' '))

def install_required_tools():
    travis_os = os.getenv('TRAVIS_OS_NAME')
    if travis_os == 'linux':
        x('sudo apt-get remove -qq libboost-*-dev -y')
        x('sudo apt-get autoremove -qq -y')
        x('sudo add-apt-repository ppa:boost-latest/ppa -y')
        x('sudo apt-get update -qq')
        x('sudo apt-get install -qq -y libboost1.55-all-dev')
        x('sudo apt-get install -qq -y libpcre3-dev')
        x('sudo apt-get install -qq -y doxygen graphviz')
    elif travis_os == 'osx':
        x('brew install cmake')
        x('brew install boost')
        x('brew install pcre')
        x('brew install doxygen')
        x('brew install graphviz')

if __name__ == '__main__':
    print(os.environ)
    os.system('echo finding && find /usr/lib -name "chrono" -type f')
    sys.exit(0)
    install_required_tools()
    non_build_variants = 'integer undefined unsigned-integer-overflow address'.split(' ')
    build_variants = ['Debug', 'Release', 'analyze'] + ['sanitize-' + s for s in sanitizers.detect() 
        if s not in non_build_variants]
    os.chdir(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
    old_cwd = os.getcwd()
    for variant in build_variants: 
        print('\n---------------------------------- %s build ------' % variant)
        folder = 'build/travis-%s' % variant
        if os.path.isdir(folder):
            shutil.rmtree(folder)
        os.makedirs(folder)
        os.chdir(folder)
        try:
            # Most of the time, build in parallel. However, on the first build in
            # the group, run the build in serial, so error messages are easier to
            # understand.
            make_flags = ' -j12'
            if variant == build_variants[0]:
                make_flags = ''
            x('cmake -DCMAKE_BUILD_TYPE=%s ../..' % variant)
            x('make%s' % make_flags)
            x('make test')
            if variant == 'Release':
                 x('make package')
                 x('make doc')
        finally:
            os.chdir(old_cwd)
